    tkpack(fr <- tkframe(f.slider), side ="top")
     lab <- tklabel(fr, text = "Speed", width = "20")
     sc <- tkscale(fr, from = 2, to = 30, showvalue = TRUE, resolution = 2, orient = "horiz") 
     tkpack(lab, sc, side =  "left")
     tkconfigure(sc, variable= speed)

   ### Run Button
    tkpack(r.but <- tkframe(box), fill = "x")
    tkpack(tkbutton(r.but, text = "Run", 
           command = function()
              reSpin(nCat =  as.numeric(tclvalue(nCat)), nDraws =  as.numeric(tclvalue(nDraws)), speed =  as.numeric(tclvalue(speed)))), 
           side="right")
   ### Exit Button
    tkpack(f.but <- tkframe(box), fill = "x")
    tkpack(tkbutton(f.but, text = "Exit", command = function()
                    tkdestroy(box)))

 }

spinFrame()
spin.env$spinOut
spin.env$spinOut
q()
n
require(BBH2)
require(BHH2)
dotPlot
dots
hist
hist.default
breaks
 nclass.Sturges
 nclass.FD
diff(c(1,5,8,9))/2
nclass.Sturges(rnorm(50)) * 5
pretty(c(1,20), 35)
sample
samplDistPlot(rep(1:10,5))
samplDistPlot(rnorm(20))
q()
n

samplDistPlot <- function(samp){
  xlim = range(samp, na.rm = TRUE)
  samp <-  samp[!is.na(samp)]
  sampSize <-  length(samp)
  nUnique <- length(unq <- sort(unique(samp)))
  nS <-   nclass.Sturges(samp) * 5
  if( nUnique < nS){
    mids = unq
    nBreaks = nUnique
    which.bin <- sapply(samp, function(x) which.max( (x == unq) * 1 ))
    x <-  samp
  } else {
    nBreaks <- nS
    breaks <- pretty(xlim, n = nS, min.n = 1)
    mids <-  0.5 * (breaks[-1L] + breaks[-sampSize])
    which.bin <- cut(samp, breaks)
    x <- mids[as.numeric(which.bin)]
  }
  bins <- model.matrix(~ 0 + which.bin)
  stackUp <- apply(bins/sampleSize, 2, cumsum)
  y <- stackUp[cbind(1:sampSize, as.numeric(which.bin))]
  plot(x,y, col=2, pch=20)
}

 samplDistPlot(rnorm(30))
 samplDistPlot(rnorm(30))
 samplDistPlot(rnorm(300))
 samplDistPlot(rep(1:5,4))
xlim <- 3*c(-1,1)
pretty(xlim, 20)
args(pretty)
help.start()
apropos("pretty")
help.search("pretty")
q
2
3
n
help.start()
pretty(rnorm(300))
pretty(rnorm(300),n=50)
par()$cin
dev.size()
7/.15
plot(1:47, rep(1,47), type="n")
plot(1:47, rep(1,47), type="p")
par()
dev.size()
dev.size()
samplDistPlot(rnorm(300))
samplDistPlot(rnorm(300))
samp <- rnorm(300)
nBins
 nUnique
length(breaks)
length(breaks[-1])
length(breaks[-nBreaks])
tail(breaks[-nBreaks])
diff(tail(breaks[-nBreaks]))
samplDistPlot(rnorm(300))
dim(bins)
dvc
nBins
length(breaks)
length(mids)
length(table(which.bins))
length(table(which.bin))
dim(bins)
summary(colSums(bins))
length(colSums(bins))
summary(as.numeric(which.bin))
xlim
prop.table(which.bins)
prop.table(which.bin)
summary(which.bin)
summary(summary(which.bin))
ls(
)
rm(list=1:10)
rm(list=ls()[1:10])
ls()
rm(list=ls()[10:15])
ls()
rm(list=ls(patt="^samp")
)
ls()
samplDistPlot(rnorm(400))
samplDistPlot(rep(1:5,5))
samp <- rep(1:5,5)
nUnique
nBins
x
dim( stackUp)
dim(bins)
which.bin
samp[1] == unq
(samp[1] == unq)*1
which.max((samp[1] == unq)*1)
dim(stackUp)
samplDistPlot(samp)
samplDistPlot(c(samp,samp))
samplDistPlot(rep(1:6, 1:6))
length(rep(1:6, 1:6))
6/21
length(rep(1:6, 1:6, 4))
samplDistPlot(rep(1:6, 1:6,4))
y
sum(y)
samplDistPlot(rep(1:5,5))
locator()
samplDistPlot(rep(1:5,5))
samplDistPlot(rnorm(100))
samplDistPlot(rnorm(100))
samplDistPlot(samp)
samplDistPlot(rnorm(100))
samplDistPlot(rnorm(200),20)
q()
y
spinFrame(plotit=FALSE)
spinFrame(plotit=FALSE)
spinFrame(plotIt=FALSE)
spin.env::spinOut
spinOut
search()
spin.env$spinOut
mean
 spin.env$spinOut <- 1:10
spin.env$spinOut
 spin.env$spinOut <- as.list(1:10)
spin.env$spinOut
spin.env$spinOut <- 3:6
spin.env$sumryStats <- list(1:10)
spin.env$sumryStats 
dev.cur()
samplDistPlot
spinFrame <- function(...){
   box <- tktoplevel()
    tkwm.title(box, "Spinner")
    tkwm.geometry(box, "+0+15")
    tkpack(f.slider <- tkframe(box))   
   ## slider1 -- Pie Pieces
    nCat <- tclVar("")
    tkpack(fr <- tkframe(f.slider), side ="top")
     lab <- tklabel(fr, text = "Number of Pieces", width = "20")
     sc <- tkscale(fr, from = 2, to = 10, showvalue = TRUE, resolution = 1, orient = "horiz")
     tkpack(lab, sc, side =  "left")
     tkconfigure(sc, variable= nCat)

   ## slider2 -- number of spins
    nDraws <- tclVar("")
    tkpack(fr <- tkframe(f.slider), side ="top")
     lab <- tklabel(fr, text = "Number of Spins", width = "20")
     sc <- tkscale(fr, from = 1, to = 20, showvalue = TRUE, resolution = 1, orient = "horiz")
     tkpack(lab, sc, side =  "left")
     tkconfigure(sc, variable= nDraws)

   ## slider3 -- speed
    speed <- tclVar("")
    tkpack(fr <- tkframe(f.slider), side ="top")
     lab <- tklabel(fr, text = "Speed", width = "20")
     sc <- tkscale(fr, from = 2, to = 30, showvalue = TRUE, resolution = 2, orient = "horiz") 
     tkpack(lab, sc, side =  "left")
     tkconfigure(sc, variable= speed)

   ### Run Button
    tkpack(r.but <- tkframe(box), fill = "x")
    tkpack(tkbutton(r.but, text = "Run", 
           command = function(){
             assign( "samples", list(1: as.numeric(tclvalue(nReps))),
                                        env=spin.env)
             for(rep in nReps){
              reSpin(nCat =  as.numeric(tclvalue(nCat)), nDraws =  as.numeric(tclvalue(nDraws)), speed =  as.numeric(tclvalue(speed)), ...)
               spin.env$samples[rep] <-  spin.env$spinOut
            }
           if(dev.cur() < 3){
             x11()
             samplDistPlot(sapply( spin.env$samples, mean))
           }
           }
            ), 
           side="right")
   
   ## Store some statistic
   statFunction <- mean
   
   ## repeat B times
   nReps <-  tclVar("")
   tkpack(fr <- tkframe(f.slider), side ="top")
   lab <- tklabel(fr, text = "Number of Repeats", width = "20")
   sc <- tkscale(fr, from = 1, to = 1000, showvalue = TRUE, resolution = 50, orient = "horiz") 
   tkpack(lab, sc, side =  "left")
   tkconfigure(sc, variable= nReps)


   
   ### Exit Button
    tkpack(f.but <- tkframe(box), fill = "x")
    tkpack(tkbutton(f.but, text = "Exit", command = function()
                    tkdestroy(box)))

 }
spinFrame(plotIt=FALSE)


help.start()
get("spinOut", env=spin.env)
spinFrame(plotIt=FALSE)
ls(env=spin.env)
rm("sumryStats", env=spin.env)
ls(env=spin.env)
nReps <- 100
 assign( "samples", list(1: as.numeric(tclvalue(nReps))), env=spin.env)
 assign( "samples", list(1:nReps), env=spin.env)
rep <- 1
spinFrame <- function(...){
   box <- tktoplevel()
    tkwm.title(box, "Spinner")
    tkwm.geometry(box, "+0+15")
    tkpack(f.slider <- tkframe(box))   
   ## slider1 -- Pie Pieces
    nCat <- tclVar("")
    tkpack(fr <- tkframe(f.slider), side ="top")
     lab <- tklabel(fr, text = "Number of Pieces", width = "20")
     sc <- tkscale(fr, from = 2, to = 10, showvalue = TRUE, resolution = 1, orient = "horiz")
     tkpack(lab, sc, side =  "left")
     tkconfigure(sc, variable= nCat)

   ## slider2 -- number of spins
    nDraws <- tclVar("")
    tkpack(fr <- tkframe(f.slider), side ="top")
     lab <- tklabel(fr, text = "Number of Spins", width = "20")
     sc <- tkscale(fr, from = 1, to = 20, showvalue = TRUE, resolution = 1, orient = "horiz")
     tkpack(lab, sc, side =  "left")
     tkconfigure(sc, variable= nDraws)

   ## slider3 -- speed
    speed <- tclVar("")
    tkpack(fr <- tkframe(f.slider), side ="top")
     lab <- tklabel(fr, text = "Speed", width = "20")
     sc <- tkscale(fr, from = 2, to = 30, showvalue = TRUE, resolution = 2, orient = "horiz") 
     tkpack(lab, sc, side =  "left")
     tkconfigure(sc, variable= speed)

   ### Run Button
    tkpack(r.but <- tkframe(box), fill = "x")
    tkpack(tkbutton(r.but, text = "Run", 
           command = function(){
             assign( "samples", list(1: as.numeric(tclvalue(nReps))),
                                        env=spin.env)
             for(rep in nReps){
              reSpin(nCat =  as.numeric(tclvalue(nCat)), nDraws =  as.numeric(tclvalue(nDraws)), speed =  as.numeric(tclvalue(speed)), ...)
              assign(paste("samples[",rep,"]",sep=""), get("spinOut", env=spin.env), env=spin.env)
            }
           if(dev.cur() < 3){
             x11()
             samplDistPlot(sapply( spin.env$samples, function(x) mean(as.numeric(x))))
           }
           }
            ), 
           side="right")
   
   ## Store some statistic
   statFunction <- mean
   
   ## repeat B times
   nReps <-  tclVar("")
   tkpack(fr <- tkframe(f.slider), side ="top")
   lab <- tklabel(fr, text = "Number of Repeats", width = "20")
   sc <- tkscale(fr, from = 1, to = 1000, showvalue = TRUE, resolution = 50, orient = "horiz") 
   tkpack(lab, sc, side =  "left")
   tkconfigure(sc, variable= nReps)


   
   ### Exit Button
    tkpack(f.but <- tkframe(box), fill = "x")
    tkpack(tkbutton(f.but, text = "Exit", command = function()
                    tkdestroy(box)))

 }

spinFrame(plotIt=FALSE)
paste("samples[",rep,"]",sep="")
for(i in 1:6) { #-- Create objects  'r.1', 'r.2', ... 'r.6' --
 nam <- paste("r",i, sep=".")
 assign(nam, 1:i, env=spin.env)
}
ls(env=spin.env)
for(i in 1:6) { #-- Create objects  'r.1', 'r.2', ... 'r.6' --
 nam <- paste("r",i, sep=".")
 assign(nam, NULL, env=spin.env)
}
ls(env=spin.env)
spin.env$r.1
dev.set
spinFrame(plotIt=FALSE)
traceback()
spin
spinFrame <- function(...){
   box <- tktoplevel()
    tkwm.title(box, "Spinner")
    tkwm.geometry(box, "+0+15")
    tkpack(f.slider <- tkframe(box))   
   ## slider1 -- Pie Pieces
    nCat <- tclVar("")
    tkpack(fr <- tkframe(f.slider), side ="top")
     lab <- tklabel(fr, text = "Number of Pieces", width = "20")
     sc <- tkscale(fr, from = 2, to = 10, showvalue = TRUE, resolution = 1, orient = "horiz")
     tkpack(lab, sc, side =  "left")
     tkconfigure(sc, variable= nCat)

   ## slider2 -- number of spins
    nDraws <- tclVar("")
    tkpack(fr <- tkframe(f.slider), side ="top")
     lab <- tklabel(fr, text = "Number of Spins", width = "20")
     sc <- tkscale(fr, from = 1, to = 20, showvalue = TRUE, resolution = 1, orient = "horiz")
     tkpack(lab, sc, side =  "left")
     tkconfigure(sc, variable= nDraws)

   ## slider3 -- speed
    speed <- tclVar("")
    tkpack(fr <- tkframe(f.slider), side ="top")
     lab <- tklabel(fr, text = "Speed", width = "20")
     sc <- tkscale(fr, from = 2, to = 30, showvalue = TRUE, resolution = 2, orient = "horiz") 
     tkpack(lab, sc, side =  "left")
     tkconfigure(sc, variable= speed)
   
   ## repeat B times  slider 4
   nReps <-  tclVar("")
   tkpack(fr <- tkframe(f.slider), side ="top")
   lab <- tklabel(fr, text = "Number of Repeats", width = "20")
   sc <- tkscale(fr, from = 1, to = 1000, showvalue = TRUE, resolution = 50, orient = "horiz") 
   tkpack(lab, sc, side =  "left")
   tkconfigure(sc, variable= nReps)

 
   ### Run Button
    tkpack(r.but <- tkframe(box), fill = "x")
    tkpack(tkbutton(r.but, text = "Run", 
           command = function(){
              reSpin(nCat =  as.numeric(tclvalue(nCat)),
                     nDraws = as.numeric(tclvalue(nDraws)),
                     nReps =  as.numeric(tclvalue(nReps)),
                     speed =  as.numeric(tclvalue(speed)), ...)
            }
           if(dev.cur() < 3){
             x11()
             samplDistPlot(apply( spin.env$samples, 1, function(x) mean(as.numeric(x))))
           }
             dev.set(2)
           }
            ), 
           side="right")
   
   ## Store some statistic
   statFunction <- mean

    tkpack(f.but <- tkframe(box), fill = "x")
    tkpack(tkbutton(f.but, text = "Exit", command = function()
                    tkdestroy(box)))

 }

try(dev.set(3))
try(dev.set(3))
err <- try(dev.set(3))
str(err)
q()
n
 spinFrame()
 spinFrame()
q()
n
?help.start()
help.start()
dev.list()
dev.new()
dev.list()
dev.new()
dev.list()
length(dev.list())
spinFrame()
length(dev.list())
dev.cur()
dev.next()
spinFrame()
spinFrame()
abline(0,1,col=grey(.2),lwd=3)
abline(0,1,col=grey(.9),lwd=3)
spinFrame()
f.slider
require(tcltk)
tclRequire("BWidget")
tt <- tktoplevel()
tkgrid(tklabel(tt,text="What's your favorite fruit?"))
fruits <- c("Apple","Orange","Banana","Pear")
comboBox <- tkwidget(tt,"ComboBox",editable=FALSE,values=fruits)
tkgrid(comboBox)

OnOK <- function()
{
    fruitChoice <- fruits[as.numeric(tclvalue(tkcmd(comboBox,"getvalue")))+1]
    tkdestroy(tt)
    msg <- paste("Good choice! ",fruitChoice,"s are delicious!",sep="")
    tkmessageBox(title="Fruit Choice",message=msg)

}
OK.but <-tkbutton(tt,text="   OK   ",command=OnOK)
tkgrid(OK.but)
tkfocus(tt)
ls()
search()
require(tkwidgets)
require(TkWidgets)
search()
spinFrame()
spinFrame()
args(tkwidget)
spinFrame()
spinFrame()
spinFrame()
q()
n
install.packages
getOption
getOPtion("repos")
getOption("repos")
install.packages
tcl("info", "tclversion")
require(tcltk)
tcl("info", "tclversion")
 tcl("ttk::style", "theme use", "winnative")
 tcl("ttk::style", "theme")
search()
ls(pos=2, patt="get")
args(tkget)
args(tkcget)
spinFrame()
spinFrame()
spinFrame()
require(twiddler)
combo
spinFrame()
help.start()
twiddle(plot(rnorm(100), type=t), t=combo("p", "l", "b"))
twiddle(print(a && !b), a = toggle(), b = toggle())
spinFrame()
spinFrame()
spinFrame()
statFunction
spinFrame()
spinFrame()
q()
y
spinFrame()
spinFrame()
q()
y
