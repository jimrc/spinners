## Top Level

  #1) Use existing data
    #a) re-randomize into new groups
    #b) Bootstrap

  #2) generate data
    #a) curve
       #i)  normal
       #ii) exp
       #iii t
    #b) categories
       #i)    spinner or balls in urn
       #ii)   number & names of categories
       #iii)  number of draws
    #c) summary stat -- run one and store it
    #d) R = number of reps
    #e) run it R times and plot results
    #f) table more extreme values


cat.gen <-  function(type, nCat, prob = rep(1/nCat, nCat), nDraws, stat,
                     nReps, test.stat, names = 1:nCat, two.sided=FALSE){
  ## function to draw nDraws iid from nCat categories, apply a statistic
  ## plot resulting stats, label extremes, and
  ## compute proportion as or more extreme.  add animation & speed?

  sample <-  apply(matrix(sample(nCat, nDraws * nReps, replace=TRUE),
                          nDraws, nReps), 2, stat)
  hist(sample)
}


cat.gen("spin", 2, nDraws=10, stat=function(x) table(x)[1]/10, nReps=1000, test.stat=.9)



spin <- function(nCat, nDraws=1, prob = rep(1/nCat, nCat), names = 1:nCat,
                 speed = c("slow", "fast"), plotIt=TRUE){
  ## function to draw randomly from a spinner
  opar <- par(mar=c(4,2,1,1)+.1)
  palette( colorspace::rainbow_hcl(nCat, c = 60, l = 80, start = 20, 
                                    end = 360*(nCat-1)/nCat))
  ## set background image
  pie(prob, labels=names, col = 1:nCat, radius = 1, clockwise = TRUE)
  ## generate all random values
  draws <- runif(nDraws) 
  ## print(draws)
  ## convert to categories
  outcomes <- cut(draws, cumsum(c(0, prob)), label=names)
  if(plotIt){
   i <-  1
    ## spinner is plotted at 36 locations
    steps <- pi/2 - 2 * pi * seq(0, 1 + draws[i] , length=36)
    for(stp in steps){
      pie(prob, labels=names, col = 1:nCat, radius = 1, clockwise = TRUE)
      points(0, 0, cex=4, pch=20)
      arrows(-cos(stp)/2, -sin(stp)/2, cos(stp)*.9, sin(stp)*.9,
             length=.3, angle = 10, lwd=4)
      Sys.sleep(.04)
    }
    mtext("O", side=1, at= -1,
          col = unclass(outcomes[1]), cex=4, line=1)
  if(nDraws > 1) {
    if(speed[1] =="slow"){
      ## keep plotting more draws
      Sys.sleep(.5) ## longer pause 
      for(i in 2:nDraws){
        ## spinner is plotted at 36 locations
        steps <- pi/2 - 2 * pi * seq(0, 1 + draws[i] , length=36)
        for(stp in steps){
          pie(prob, labels=names, col = 1:nCat, radius = 1, clockwise = TRUE)
          mtext(rep("O",i-1), side=1, at= -1 + (0:(i-2)) /(nDraws -1) *2,
                col = unclass(outcomes[1:(i-1)]), cex=4, line=1)
          points(0, 0, cex=4, pch=20)
          arrows(-cos(stp)/4, -sin(stp)/4, cos(stp)*.9, sin(stp)*.9,
                 length=.3, angle = 10, lwd=4)
          Sys.sleep(.04)  ## short pause 
        }
        mtext(rep("O",i), side=1, at= -1 + (0:(i-1))/(nDraws-1) *2  ,
              col = unclass(outcomes[1:i]), cex=4, line=1)
        Sys.sleep(.5)
      }
    }
    ## show all draws
    ends <-  pi/2 - 2 * pi * draws
    arrows(-cos(ends)/2, -sin(ends)/2, cos(ends)*.9, sin(ends)*.9,
              length=.3, angle = 10, lwd=4)
  
    mtext(rep("O",nDraws), side=1, at= -1 + (0:(nDraws-1))/(nDraws-1) *2  ,
          col = unclass(outcomes), cex=4, line=1)
  }
 }
  par(opar)
  outcomes
}

 spin(4, nDraws = 10, prob=(1:4)/10, names=LETTERS[1:4], speed = "fast")

 spin(2, nDraws = 3, names=c("Hit","Miss"))

 ## assume we want to see results as a proportion?


diceroll <- function(n=10, plotIt=TRUE, bkg="red", pips = "white", edge=1.2){
  rollSeq <- sample(6, n, replace=TRUE)
  if(plotIt){
    opar <- par(mar=rep(1.1,4))
    pipLocs <- list(one = list(theta=0, r=0),
                    two = list(theta=c(1,5) * pi/4, r = .7),
                    tre = list(theta=c(1, 0, 5)*pi/4, r= c(.8,0,.8)),
                    four = list(theta=c(1,3,5,7)*pi/4, r = .8),
                    five = list(theta=c(1,3,3,5,7)*pi/4, r = c(1,1,0,1,1)*.9),
                    six = list(theta=c(1,3,0,4,5,7)*pi/4, r = c(.83, .83,.6,.6,.83,.83)))
    rotation <- runif(n, 0, pi/2)
    edge <- edge * sqrt(2) 
    for(ndx in 1:n){
      plot(-1:1 *2.6,-1:1 *2.6, type="n",xlab="",ylab="",xaxt="n",yaxt="n", fin=c(2,2), bty="n")
      polygon(x = edge*cos(rotation[ndx] + c(1,-1,-3,3)*pi/4),  col=bkg, 
              y = edge*sin(rotation[ndx] +c(1,-1,-3,3)*pi/4 ) * dev.size()[1]/dev.size()[2])
      points(x= cos(pipLocs[[rollSeq[ndx]]]$theta + rotation[ndx]) * pipLocs[[rollSeq[ndx]]]$r ,
             y= sin(pipLocs[[rollSeq[ndx]]]$theta + rotation[ndx]) * pipLocs[[rollSeq[ndx]]]$r *
               dev.size()[1]/dev.size()[2], col= pips, cex=5, pch=20)
      Sys.sleep(.1)
    }
  }
  par(opar)
  rollSeq
}
diceroll(10)


sockDrawer  <- function(Factor1, nDraws, plotIt=TRUE, speed = 10, replace=TRUE){
  ## function to randomly sample "socks" from a "drawer" 
  nObjects <- length(Factor1)
  if(! is.factor(Factor1)){
    Factor1 <- as.factor(Factor1)
  }
  nCat <- length(levels(Factor1))
  randomNdx <- sample(nObjects, nDraws, replace=replace)
  if(plotIt){
    opar <- par(mar=c(4,2,1,1)+.1)
    ## shorten names of factor levels for easier printing
    #levels(Factor1) <- colnames( model.matrix( ~ Factor1 + 0))
    palette( colorspace::rainbow_hcl(nCat, c = 40, l = 60, start = 20, 
                                     end = 360*(nCat-1)/nCat))
    plot( 0:1, c(-.5,1)  , type="n",xlab="",ylab="",xaxt="n",yaxt="n", fin=c(2,2), bty="n")
    rect( xleft=0, xright=1, ytop=1,ybottom=0, col="cornsilk")
    #if(nObjects > 24){
      Ncols <- ceiling( nObjects ^ .5) +1
      Nrows <- ceiling( nObjects / Ncols)
    #}  else {
    #  Nrows <- 3; Ncols <- 8
    #}
    xmid <- (0:(nObjects-1) %% Ncols)/Ncols + 1/Ncols/2
    ymid <- (0:(nObjects-1) %/% Ncols)/(Ncols) + 1.5/Ncols/2  
    radius <- 1/Ncols/4
    showAllSocks <- function(){
      for(ndx in 1:nObjects){
        plotrix::draw.circle(r = radius, x = xmid[ndx], y=ymid[ndx], col = unclass(Factor1)[ndx],
                             border=NA)
      }
      text( x=xmid, y = ymid, Factor1)
    }
    ## draw out the samples
    xOut <- (1:nDraws )/nDraws -1/2/nDraws
    yOut <- -radius -.1
    showAllSocks()
    for(ndx in 1:nDraws){
      plotrix::draw.circle(r = radius, x = xmid[randomNdx[ndx]], y=ymid[randomNdx[ndx]], 
                         col = "cornsilk")
      plotrix::draw.circle(r = radius, x = xOut[ndx], y=yOut, col =  unclass(Factor1)[randomNdx[ndx]] )
      text(xOut[ndx], yOut, Factor1[randomNdx[ndx]])
      Sys.sleep(3/speed)
      if(replace)
        showAllSocks()
    }
  }
  par(opar)
  Factor1[randomNdx]
}

sockDrawer(rep(LETTERS[1:3],4),3, replace=T)
sockDrawer(rep(LETTERS[1:3],4),3, replace=F,speed=2)

sponse), groups)
}
sockDrawer(rep(LETTERS[1:3],4),3, replace=T)
